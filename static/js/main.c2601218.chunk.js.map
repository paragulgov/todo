{"version":3,"sources":["api/todo-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/Todos/todos-reducer.ts","features/Todos/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/Todos/Todo/Task/Task.tsx","features/Todos/Todo/Todo.tsx","features/Todos/Todos.tsx","components/ErrorCnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","components/Backdrop/Backdrop.tsx","app/App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["TaskStatus","TaskPriority","instance","axios","create","baseURL","withCredentials","headers","todoAPI","get","title","post","todoId","delete","put","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleNetworkAppError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","changeTodoEntityStatusAC","updateTaskTC","domainModel","getState","task","tasks","find","id","apiModel","startDate","priority","description","deadline","then","res","resultCode","updateTaskAC","catch","console","warn","AddItemForm","React","memo","props","useState","setTitle","setError","addItem","trim","TextField","onChange","e","currentTarget","onKeyPress","charCode","variant","size","color","label","helperText","disabled","IconButton","onClick","EditableSpan","editMode","setEditMode","onBlur","changeTitle","autoFocus","onDoubleClick","Task","changeTaskTitle","entityStatus","removeTask","changeTaskStatus","onChangeTaskTitleHandler","useCallback","className","Completed","Checkbox","checked","newStatus","New","Delete","fontSize","Todo","todo","addTask","changeTodoTitle","changeTodoFilter","removeTodo","useDispatch","useEffect","setTasksAC","items","onChangeTodoTitle","onAddTask","allClickHandler","activeClickHandler","completedClickHandler","tasksForTodo","filter","style","listStyle","padding","margin","map","Button","Todos","todos","useSelector","state","auth","addTodo","item","addTodoTC","changeTodoFilterAC","changeTodoTitleAC","changeTodoTitleTC","removeTodoAC","deleteTodoTC","addTaskTC","removeTaskAC","deleteTasksTC","Grid","container","spacing","Paper","elevation","to","Alert","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","values","response","validate","errors","test","justify","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","getFieldProps","touched","FormControlLabel","control","useStyles","makeStyles","theme","createStyles","backdrop","zIndex","drawer","SimpleBackdrop","classes","initialized","Backdrop","CircularProgress","root","flexGrow","menuButton","marginRight","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","todoListId","stateCopy","copyState","forEach","store","createStore","applyMiddleware","ReduxThunk","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c2601218.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n  withCredentials: true,\r\n  headers: {\r\n    'API-KEY': 'd4e93fe8-e0fb-4a22-9388-0b3da2212073'\r\n  }\r\n})\r\n\r\n\r\nexport const todoAPI = {\r\n  getTodos() {\r\n    return instance.get<Array<TodoType>>(`todo-lists`)\r\n  },\r\n  createTodo(title: string) {\r\n    return instance.post<ResponseType<{ item: TodoType }>>(`todo-lists`, {title})\r\n  },\r\n  deleteTodo(todoId: string) {\r\n    return instance.delete<ResponseType>(`todo-lists/${todoId}`)\r\n  },\r\n  updateTodo(todoId: string, title: string) {\r\n    return instance.put<ResponseType>(`todo-lists/${todoId}`, {title})\r\n  },\r\n\r\n  getTasks(todoId: string) {\r\n    return instance.get<GetTasksResponse>(`todo-lists/${todoId}/tasks`)\r\n  },\r\n  createTask(todoId: string, title: string) {\r\n    return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todoId}/tasks`, {title})\r\n  },\r\n  deleteTask(todoId: string, taskId: string) {\r\n    return instance.delete<ResponseType>(`todo-lists/${todoId}/tasks/${taskId}`)\r\n  },\r\n  updateTask(todoId: string, taskId: string, model: UpdateTaskModelType) {\r\n    return instance.put<ResponseType<TaskType>>(`todo-lists/${todoId}/tasks/${taskId}`, model)\r\n  }\r\n}\r\n\r\nexport const authAPI = {\r\n  login(data: LoginParamsType) {\r\n    return instance.post<ResponseType<{userId?: number}>>(`auth/login`, data)\r\n  },\r\n  me(){\r\n    return instance.get<ResponseType<MeResponseType>>(`auth/me`)\r\n  },\r\n  logout(){\r\n    return instance.delete<ResponseType>(`auth/login`)\r\n  }\r\n}\r\n\r\n// types\r\n\r\n//todo & task\r\n\r\nexport type TodoType = {\r\n  id: string\r\n  title: string\r\n  addedDate: string\r\n  order: number\r\n}\r\n\r\nexport type TaskType = {\r\n  id: string\r\n  todoListId: string\r\n  description: string\r\n  title: string\r\n  status: number\r\n  priority: number\r\n  startDate: string\r\n  deadline: string\r\n  order: number\r\n  addedDate: string\r\n}\r\n\r\nexport enum TaskStatus {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft = 3\r\n}\r\n\r\nexport enum TaskPriority {\r\n  Low = 0,\r\n  Middle = 1,\r\n  Hi = 2,\r\n  Draft = 3,\r\n  Urgently = 3,\r\n  Later = 4\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n  title: string\r\n  description: string\r\n  status: TaskStatus\r\n  priority: TaskPriority\r\n  startDate: string\r\n  deadline: string\r\n}\r\n\r\nexport type ResponseType<T = {}> = {\r\n  resultCode: number\r\n  messages: Array<string>\r\n  data: T\r\n}\r\n\r\ntype GetTasksResponse = {\r\n  items: Array<TaskType>\r\n  totalCount: number\r\n  error: string | null\r\n}\r\n\r\n// auth\r\n\r\nexport type LoginParamsType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n  captcha?: string\r\n}\r\n\r\nexport type MeResponseType = {\r\n  id: number\r\n  email: string\r\n  login: string\r\n}\r\n","import {ResponseType} from '../api/todo-api'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n  if (data.messages.length) {\r\n    dispatch(setAppErrorAC(data.messages[0]))\r\n  } else {\r\n    dispatch(setAppErrorAC('Some error occurred'))\r\n  }\r\n  dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleNetworkAppError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n  dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n  dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {authAPI, LoginParamsType} from '../../api/todo-api'\r\nimport {Dispatch} from 'redux'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleNetworkAppError, handleServerAppError} from '../../utils/error-utils'\r\n\r\nconst initialState = {\r\n  isLoggedIn: false as boolean\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'LOGIN/SET-IS-LOGGED-IN':\r\n      return {...state, isLoggedIn: action.value}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// actions\r\n\r\nexport const setIsLoggedInAC = (value: boolean) => {\r\n  return {type: 'LOGIN/SET-IS-LOGGED-IN', value} as const\r\n}\r\n\r\n// thunks\r\n\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionType>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  authAPI.login(data)\r\n    .then(response => {\r\n      if (response.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC(true))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n      } else {\r\n        handleServerAppError(response.data, dispatch)\r\n      }\r\n    })\r\n    .catch(error => {\r\n      handleNetworkAppError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionType>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  authAPI.logout()\r\n    .then(response => {\r\n      if (response.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC(false))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n      } else {\r\n        handleServerAppError(response.data, dispatch)\r\n      }\r\n    })\r\n    .catch(error => {\r\n      handleNetworkAppError(error, dispatch)\r\n    })\r\n}\r\n\r\n\r\n\r\n// types\r\n\r\nexport type SetIsLoggedInActionType = typeof setIsLoggedInAC\r\ntype ActionType =\r\n  | ReturnType<SetIsLoggedInActionType>\r\n  | SetAppErrorActionType\r\n  | SetAppStatusActionType\r\n\r\n\r\n","import {Dispatch} from 'redux'\r\nimport {authAPI} from '../api/todo-api'\r\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer'\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n  status: 'idle' as RequestStatusType,\r\n  error: null as string | null,\r\n  isInitialized: false as boolean\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'APP/SET-STATUS':\r\n      return {...state, status: action.status}\r\n    case 'APP/SET-ERROR':\r\n      return {...state, error: action.error}\r\n    case 'APP/SET-INIT':\r\n      return {...state, isInitialized: action.value}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppInitAC = (value: boolean) => ({type: 'APP/SET-INIT', value} as const)\r\n\r\nexport const initAppTC = () => (dispatch: Dispatch) => {\r\n  authAPI.me()\r\n    .then(res => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC(true))\r\n      }\r\n      dispatch(setAppInitAC(true))\r\n    })\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\ntype ActionType =\r\n  | SetAppErrorActionType\r\n  | SetAppStatusActionType\r\n  | ReturnType<typeof setAppInitAC>\r\n","import {Dispatch} from 'redux'\r\nimport {todoAPI, TodoType} from '../../api/todo-api'\r\nimport {RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleNetworkAppError} from '../../utils/error-utils'\r\n\r\nconst initialState: Array<TodoDomainType> = []\r\n\r\nexport const todosReducer = (state: Array<TodoDomainType> = initialState, action: ActionType): Array<TodoDomainType> => {\r\n  switch (action.type) {\r\n    case 'REMOVE-TODO':\r\n      return state.filter(todo => todo.id !== action.todoId)\r\n    case 'ADD-TODO':\r\n      return [{...action.todo, filter: 'all', entityStatus: 'idle'}, ...state]\r\n    case 'CHANGE-TODO-TITLE':\r\n      return state.map(todo => todo.id === action.todoId ? {...todo, title: action.title} : todo)\r\n    case 'CHANGE-TODO-FILTER':\r\n      return state.map(todo => todo.id === action.todoId ? {...todo, filter: action.filter} : todo)\r\n    case 'CHANGE-TODO-ENTITY-STATUS':\r\n      return state.map(todo => todo.id === action.todoId ? {...todo, entityStatus: action.status} : todo)\r\n    case 'SET-TODOS':\r\n      return action.todos.map(todo => ({...todo, filter: 'all', entityStatus: 'idle'}))\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// actions\r\n\r\nexport const removeTodoAC = (todoId: string) => {\r\n  return {type: 'REMOVE-TODO', todoId} as const\r\n}\r\n\r\nexport const addTodoAC = (todo: TodoType) => {\r\n  return {type: 'ADD-TODO', todo} as const\r\n}\r\n\r\nexport const changeTodoTitleAC = (todoId: string, title: string) => {\r\n  return {type: 'CHANGE-TODO-TITLE', todoId, title} as const\r\n}\r\n\r\nexport const changeTodoFilterAC = (todoId: string, filter: TodoFilterValueType) => {\r\n  return {type: 'CHANGE-TODO-FILTER', todoId, filter} as const\r\n}\r\n\r\nexport const setTodosAC = (todos: Array<TodoType>) => {\r\n  return {type: 'SET-TODOS', todos} as const\r\n}\r\n\r\nexport const changeTodoEntityStatusAC = (todoId: string, status: RequestStatusType) => {\r\n  return {type: 'CHANGE-TODO-ENTITY-STATUS', todoId, status} as const\r\n}\r\n\r\n// thunks\r\n\r\nexport const fetchTodosTC = () => (dispatch: Dispatch<ActionType>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  todoAPI.getTodos()\r\n    .then((res) => {\r\n      dispatch(setTodosAC(res.data))\r\n    })\r\n    .catch((error) => {\r\n      handleNetworkAppError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const deleteTodoTC = (todoId: string) => (dispatch: Dispatch<ActionType>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  dispatch(changeTodoEntityStatusAC(todoId, 'loading'))\r\n  todoAPI.deleteTodo(todoId)\r\n    .then((res) => {\r\n      dispatch(removeTodoAC(todoId))\r\n      dispatch(setAppStatusAC('succeeded'))\r\n    })\r\n    .catch((error) => {\r\n      handleNetworkAppError(error, dispatch)\r\n      dispatch(changeTodoEntityStatusAC(todoId, 'failed'))\r\n    })\r\n}\r\n\r\nexport const addTodoTC = (title: string) => (dispatch: Dispatch<ActionType>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  todoAPI.createTodo(title)\r\n    .then((res) => {\r\n      dispatch(addTodoAC(res.data.data.item))\r\n      dispatch(setAppStatusAC('succeeded'))\r\n    })\r\n    .catch((error) => {\r\n      handleNetworkAppError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const changeTodoTitleTC = (todoId: string, title: string) => (dispatch: Dispatch<ActionType>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  todoAPI.updateTodo(todoId, title)\r\n    .then((res) => {\r\n      dispatch(changeTodoTitleAC(todoId, title))\r\n      dispatch(setAppStatusAC('succeeded'))\r\n    })\r\n    .catch((error) => {\r\n      handleNetworkAppError(error, dispatch)\r\n    })\r\n}\r\n\r\n// types\r\n\r\nexport type SetTodosActionType = ReturnType<typeof setTodosAC>\r\nexport type RemoveTodoActionType = ReturnType<typeof removeTodoAC>\r\nexport type AddTodoActionType = ReturnType<typeof addTodoAC>\r\n\r\ntype ActionType =\r\n  | RemoveTodoActionType\r\n  | AddTodoActionType\r\n  | SetTodosActionType\r\n  | ReturnType<typeof changeTodoTitleAC>\r\n  | ReturnType<typeof changeTodoFilterAC>\r\n  | SetAppStatusActionType\r\n  | ReturnType<typeof changeTodoEntityStatusAC>\r\n  | SetAppErrorActionType\r\n\r\nexport type TodoFilterValueType = 'all' | 'active' | 'completed'\r\nexport type TodoDomainType = TodoType & {\r\n  filter: TodoFilterValueType,\r\n  entityStatus: RequestStatusType\r\n}\r\n","import {TaskPriority, TaskStatus, TaskType, todoAPI, UpdateTaskModelType} from '../../api/todo-api'\r\nimport {AddTodoActionType, RemoveTodoActionType, SetTodosActionType} from './todos-reducer'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleNetworkAppError, handleServerAppError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksType = {}\r\n\r\nexport const tasksReducer = (state: TasksType = initialState, action: ActionType) => {\r\n  switch (action.type) {\r\n    case 'REMOVE-TASK':\r\n      return {...state, [action.todoId]: state[action.todoId].filter(task => task.id !== action.taskId)}\r\n    case 'ADD-TASK':\r\n      return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n    case 'UPDATE-TASK':\r\n      return {\r\n        ...state, [action.todoId]: state[action.todoId].map(task => task.id === action.taskId\r\n          ? {...task, ...action.model}\r\n          : task\r\n        )\r\n      }\r\n    case 'ADD-TODO':\r\n      return {...state, [action.todo.id]: []}\r\n    case 'REMOVE-TODO': {\r\n      const stateCopy = {...state}\r\n      delete stateCopy[action.todoId]\r\n      return stateCopy\r\n    }\r\n    case 'SET-TODOS': {\r\n      const copyState = {...state}\r\n      action.todos.forEach(todo => {\r\n        copyState[todo.id] = []\r\n      })\r\n      return copyState\r\n    }\r\n    case 'SET-TASKS':\r\n      return {...state, [action.todoId]: action.tasks}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// actions\r\n\r\nexport const removeTaskAC = (taskId: string, todoId: string) => {\r\n  return {type: 'REMOVE-TASK', taskId, todoId} as const\r\n}\r\n\r\nexport const addTaskAC = (task: TaskType) => {\r\n  return {type: 'ADD-TASK', task} as const\r\n}\r\n\r\nexport const updateTaskAC = (taskId: string, todoId: string, model: UpdateDomainTaskModelType) => {\r\n  return {type: 'UPDATE-TASK', taskId, todoId, model} as const\r\n}\r\n\r\nexport const setTasksAC = (tasks: Array<TaskType>, todoId: string) => {\r\n  return {type: 'SET-TASKS', tasks, todoId} as const\r\n}\r\n\r\n// thunks\r\n\r\nexport const fetchTasksTC = (todoId: string) => (dispatch: Dispatch<ActionType>) => {\r\n  todoAPI.getTasks(todoId)\r\n    .then((res) => {\r\n      dispatch(setTasksAC(res.data.items, todoId))\r\n      dispatch(setAppStatusAC('succeeded'))\r\n    })\r\n    .catch((error) => {\r\n      handleNetworkAppError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const deleteTasksTC = (todoId: string, taskId: string) => (dispatch: Dispatch<ActionType>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n\r\n  todoAPI.deleteTask(todoId, taskId)\r\n    .then((res) => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(removeTaskAC(taskId, todoId))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n      } else {\r\n        handleServerAppError(res.data, dispatch)\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleNetworkAppError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const addTaskTC = (title: string, todoId: string) => (dispatch: Dispatch<ActionType>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  todoAPI.createTask(todoId, title)\r\n    .then((res) => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(addTaskAC(res.data.data.item))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n      } else {\r\n        handleServerAppError(res.data, dispatch)\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleNetworkAppError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const updateTaskTC = (todoId: string, taskId: string, domainModel: UpdateDomainTaskModelType) => {\r\n  return (dispatch: Dispatch<ActionType>, getState: () => AppRootStateType) => {\r\n\r\n    const state = getState()\r\n    const task = state.tasks[todoId].find(task => task.id === taskId)\r\n    if (!task) {\r\n      console.warn('task not found')\r\n      return\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n      status: task.status,\r\n      startDate: task.startDate,\r\n      priority: task.priority,\r\n      title: task.title,\r\n      description: task.description,\r\n      deadline: task.deadline,\r\n      ...domainModel\r\n    }\r\n\r\n    dispatch(setAppStatusAC('loading'))\r\n    todoAPI.updateTask(todoId, taskId, apiModel)\r\n      .then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n          dispatch(updateTaskAC(taskId, todoId, domainModel))\r\n          dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n          handleServerAppError(res.data, dispatch)\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        handleNetworkAppError(error, dispatch)\r\n      })\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport type TasksType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\n\r\ntype ActionType =\r\n  | ReturnType<typeof removeTaskAC>\r\n  | ReturnType<typeof addTaskAC>\r\n  | ReturnType<typeof updateTaskAC>\r\n  | ReturnType<typeof setTasksAC>\r\n  | SetTodosActionType\r\n  | RemoveTodoActionType\r\n  | AddTodoActionType\r\n  | SetAppErrorActionType\r\n  | SetAppStatusActionType\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n  title?: string\r\n  description?: string\r\n  status?: TaskStatus\r\n  priority?: TaskPriority\r\n  startDate?: string\r\n  deadline?: string\r\n}\r\n","import {IconButton, TextField} from '@material-ui/core'\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline'\r\n\r\ntype AddItemFormPropsType = {\r\n  addItem: (title: string) => void\r\n  disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n  const [title, setTitle] = useState<string>('')\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n  }\r\n\r\n  const addItem = () => {\r\n    if (title.trim() !== '') {\r\n      props.addItem(title)\r\n      setTitle('')\r\n    } else {\r\n      setError('Title is required')\r\n    }\r\n  }\r\n\r\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (error !== null) {\r\n      setError(null)\r\n    }\r\n    if (e.charCode === 13) {\r\n      addItem()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <TextField\r\n        value={title}\r\n        onChange={onChangeHandler}\r\n        onKeyPress={onKeyPressHandler}\r\n        error={!!error}\r\n        variant=\"outlined\"\r\n        size=\"small\"\r\n        color=\"secondary\"\r\n        label=\"Title\"\r\n        helperText={error}\r\n        disabled={props.disabled}\r\n      />\r\n      <IconButton onClick={addItem} disabled={props.disabled}>\r\n        <AddCircleOutlineIcon />\r\n      </IconButton>\r\n    </div>\r\n  )\r\n})\r\n","import React, {ChangeEvent, useState} from 'react'\r\nimport {TextField} from '@material-ui/core'\r\n\r\ntype EditableSpanPropsType = {\r\n  title: string\r\n  changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n  const [editMode, setEditMode] = useState<boolean>(false)\r\n  const [title, setTitle] = useState<string>('')\r\n\r\n  const onEditMode = () => {\r\n    setEditMode(true)\r\n    setTitle(props.title)\r\n  }\r\n\r\n  const offEditMode = () => {\r\n    setEditMode(false)\r\n    props.changeTitle(title)\r\n  }\r\n\r\n  const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n  }\r\n\r\n  return (\r\n    editMode\r\n      ? <TextField\r\n        value={title}\r\n        onChange={onChangeTitleHandler}\r\n        onBlur={offEditMode}\r\n        variant=\"standard\"\r\n        size=\"small\"\r\n        color=\"secondary\"\r\n        autoFocus\r\n      />\r\n      : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n  )\r\n})\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatus, TaskType} from '../../../../api/todo-api'\r\nimport {RequestStatusType} from '../../../../app/app-reducer'\r\n\r\ntype TaskPropsType = {\r\n  task: TaskType\r\n  todoId: string\r\n  removeTask: (taskId: string, todoId: string) => void\r\n  changeTaskStatus: (taskId: string, todoId: string, status: TaskStatus) => void\r\n  changeTaskTitle: (taskId: string, todoId: string, title: string) => void\r\n  entityStatus: RequestStatusType\r\n}\r\n\r\nexport const Task: React.FC<TaskPropsType> = React.memo(props => {\r\n  const {\r\n    task,\r\n    todoId,\r\n    changeTaskTitle,\r\n    entityStatus,\r\n    removeTask,\r\n    changeTaskStatus\r\n  } = props\r\n\r\n  const onClickHandler = () => removeTask(task.id, todoId)\r\n\r\n  const onChangeTaskStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const newStatus = e.currentTarget.checked\r\n    changeTaskStatus(task.id, todoId, newStatus ? TaskStatus.Completed : TaskStatus.New)\r\n  }\r\n\r\n  const onChangeTaskTitleHandler = useCallback((title: string) => {\r\n    changeTaskTitle(task.id, todoId, title)\r\n  }, [changeTaskTitle, task.id, todoId])\r\n\r\n  return (\r\n    <li key={task.id} className={task.status === TaskStatus.Completed ? 'is-done' : ''}>\r\n      <Checkbox\r\n        checked={task.status === TaskStatus.Completed}\r\n        onChange={onChangeTaskStatusHandler}\r\n        disabled={entityStatus === 'loading'}\r\n      />\r\n      <EditableSpan title={task.title} changeTitle={onChangeTaskTitleHandler} />\r\n      <IconButton onClick={onClickHandler} disabled={entityStatus === 'loading'}>\r\n        <Delete fontSize=\"small\" />\r\n      </IconButton>\r\n    </li>\r\n  )\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TodoDomainType, TodoFilterValueType} from '../todos-reducer'\r\nimport {TaskStatus, TaskType} from '../../../api/todo-api'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype TodoPropsType = {\r\n  todo: TodoDomainType\r\n  changeTodoFilter: (value: TodoFilterValueType, todoId: string) => void\r\n  changeTodoTitle: (title: string, todoId: string) => void\r\n  removeTodo: (todoId: string) => void\r\n  tasks: Array<TaskType>\r\n  addTask: (title: string, todoId: string) => void\r\n  removeTask: (taskId: string, todoId: string) => void\r\n  changeTaskTitle: (taskId: string, todoId: string, title: string) => void\r\n  changeTaskStatus: (taskId: string, todoId: string, status: TaskStatus) => void\r\n}\r\n\r\nexport const Todo: React.FC<TodoPropsType> = React.memo((props) => {\r\n\r\n  const {\r\n    tasks,\r\n    todo,\r\n    addTask,\r\n    removeTask,\r\n    changeTodoTitle,\r\n    changeTodoFilter,\r\n    changeTaskStatus,\r\n    changeTaskTitle,\r\n    removeTodo\r\n  } = props\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchTasksTC(todo.id))\r\n  }, [dispatch, todo.id])\r\n\r\n  const onRemoveTodo = () => removeTodo(todo.id)\r\n\r\n  const onChangeTodoTitle = useCallback((title: string) => {\r\n    return changeTodoTitle(title, todo.id)\r\n  }, [changeTodoTitle, todo.id])\r\n\r\n  const onAddTask = useCallback((title: string) => {\r\n    return addTask(title, todo.id)\r\n  }, [addTask, todo.id])\r\n\r\n  const allClickHandler = useCallback(() => {\r\n    return changeTodoFilter('all', todo.id)\r\n  }, [changeTodoFilter, todo.id])\r\n\r\n  const activeClickHandler = useCallback(() => {\r\n    return changeTodoFilter('active', todo.id)\r\n  }, [changeTodoFilter, todo.id])\r\n\r\n  const completedClickHandler = useCallback(() => {\r\n    return changeTodoFilter('completed', todo.id)\r\n  }, [changeTodoFilter, todo.id])\r\n\r\n  let tasksForTodo = tasks\r\n\r\n  if (todo.filter === 'active') {\r\n    tasksForTodo = tasks.filter(task => task.status === TaskStatus.New)\r\n  }\r\n\r\n  if (todo.filter === 'completed') {\r\n    tasksForTodo = tasks.filter(task => task.status === TaskStatus.Completed)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>\r\n        <EditableSpan title={todo.title} changeTitle={onChangeTodoTitle} />\r\n        <IconButton onClick={onRemoveTodo} disabled={todo.entityStatus === 'loading'}>\r\n          <Delete fontSize=\"small\" />\r\n        </IconButton>\r\n      </h3>\r\n      <AddItemForm addItem={onAddTask} disabled={todo.entityStatus === 'loading'} />\r\n      <ul style={{listStyle: 'none', padding: '0', margin: '0'}}>\r\n        {\r\n          tasksForTodo.map(task => {\r\n            return (\r\n              <Task\r\n                key={task.id}\r\n                task={task}\r\n                todoId={todo.id}\r\n                removeTask={removeTask}\r\n                changeTaskTitle={changeTaskTitle}\r\n                changeTaskStatus={changeTaskStatus}\r\n                entityStatus={todo.entityStatus}\r\n              />\r\n            )\r\n          })\r\n        }\r\n      </ul>\r\n      <div>\r\n        <Button\r\n          onClick={allClickHandler}\r\n          color=\"secondary\"\r\n          variant={todo.filter === 'all' ? 'outlined' : 'text'}\r\n          size=\"small\"\r\n        >\r\n          All\r\n        </Button>\r\n        <Button\r\n          onClick={activeClickHandler}\r\n          color=\"secondary\"\r\n          variant={todo.filter === 'active' ? 'outlined' : 'text'}\r\n          size=\"small\"\r\n        >\r\n          Active\r\n        </Button>\r\n        <Button\r\n          onClick={completedClickHandler}\r\n          color=\"secondary\"\r\n          variant={todo.filter === 'completed' ? 'outlined' : 'text'}\r\n          size=\"small\"\r\n        >\r\n          Completed\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n  addTodoTC,\r\n  changeTodoFilterAC,\r\n  changeTodoTitleTC,\r\n  deleteTodoTC,\r\n  fetchTodosTC,\r\n  TodoDomainType,\r\n  TodoFilterValueType\r\n} from './todos-reducer'\r\nimport {addTaskTC, deleteTasksTC, TasksType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatus} from '../../api/todo-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todo} from './Todo/Todo'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\ntype TodosPropsType = {}\r\nexport const Todos: React.FC<TodosPropsType> = props => {\r\n  const dispatch = useDispatch()\r\n  const todos = useSelector<AppRootStateType, Array<TodoDomainType>>(state => state.todos)\r\n  const tasks = useSelector<AppRootStateType, TasksType>(state => state.tasks)\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n  useEffect(() => {\r\n    if (!isLoggedIn) {\r\n      return\r\n    }\r\n\r\n    dispatch(fetchTodosTC())\r\n  }, [dispatch, isLoggedIn])\r\n\r\n  const addTodo = useCallback((title: string) => {\r\n    dispatch(addTodoTC(title))\r\n  }, [dispatch])\r\n\r\n  const changeTodoFilter = useCallback((value: TodoFilterValueType, todoId: string) => {\r\n    dispatch(changeTodoFilterAC(todoId, value))\r\n  }, [dispatch])\r\n\r\n  const changeTodoTitle = useCallback((title: string, todoId: string) => {\r\n    dispatch(changeTodoTitleTC(todoId, title))\r\n  }, [dispatch])\r\n\r\n  const removeTodo = useCallback((todoId: string) => {\r\n    dispatch(deleteTodoTC(todoId))\r\n  }, [dispatch])\r\n\r\n  const changeTaskStatus = useCallback((taskId: string, todoId: string, status: TaskStatus) => {\r\n    dispatch(updateTaskTC(todoId, taskId, {status}))\r\n  }, [dispatch])\r\n\r\n  const addTask = useCallback((title: string, todoId: string) => {\r\n    dispatch(addTaskTC(title, todoId))\r\n  }, [dispatch])\r\n\r\n  const removeTask = useCallback((taskId: string, todoId: string) => {\r\n    dispatch(deleteTasksTC(todoId, taskId))\r\n  }, [dispatch])\r\n\r\n  const changeTaskTitle = useCallback((taskId: string, todoId: string, title: string) => {\r\n    dispatch(updateTaskTC(todoId, taskId, {title}))\r\n  }, [dispatch])\r\n\r\n  if (!isLoggedIn) {\r\n    return <Redirect to=\"/login\" />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid container style={{padding: '20px'}}>\r\n        <AddItemForm addItem={addTodo} />\r\n      </Grid>\r\n      <Grid container spacing={3}>\r\n        {\r\n          todos.map(todo => {\r\n            return (\r\n              <Grid item key={todo.id}>\r\n                <Paper style={{padding: '10px'}} elevation={5}>\r\n                  <Todo\r\n                    todo={todo}\r\n                    changeTodoFilter={changeTodoFilter}\r\n                    removeTodo={removeTodo}\r\n                    changeTodoTitle={changeTodoTitle}\r\n                    tasks={tasks[todo.id]}\r\n                    removeTask={removeTask}\r\n                    addTask={addTask}\r\n                    changeTaskStatus={changeTaskStatus}\r\n                    changeTaskTitle={changeTaskTitle}\r\n                  />\r\n                </Paper>\r\n              </Grid>\r\n            )\r\n          })\r\n        }\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n  const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n  const dispatch = useDispatch()\r\n\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return\r\n    }\r\n\r\n    dispatch(setAppErrorAC(null))\r\n  }\r\n\r\n  const isOpen = error !== null\r\n\r\n  return (\r\n    <div>\r\n      <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"error\">\r\n          {error}\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from 'formik'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {loginTC} from './auth-reducer'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\ntype FormikErrorType = {\r\n  email?: string\r\n  password?: string\r\n  rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n  const dispatch = useDispatch()\r\n\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      rememberMe: false\r\n    },\r\n    onSubmit: values => {\r\n      dispatch(loginTC(values))\r\n    },\r\n    validate: (values) => {\r\n      const errors: FormikErrorType = {}\r\n      if (!values.email) {\r\n        errors.email = 'Required'\r\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address'\r\n      }\r\n      if (!values.password) {\r\n        errors.password = 'Required'\r\n      } else if (values.password.length < 2) {\r\n        errors.password = 'Password must be more than 2 characters'\r\n      }\r\n      return errors\r\n    },\r\n  })\r\n\r\n  if (isLoggedIn) {\r\n    return <Redirect to=\"/\" />\r\n  }\r\n\r\n  return <Grid container justify=\"center\">\r\n    <Grid item xs={4}>\r\n      <form onSubmit={formik.handleSubmit}>\r\n        <FormControl>\r\n          <FormLabel>\r\n            <p>To log in get registered\r\n              <a\r\n                href={'https://social-network.samuraijs.com/'}\r\n                target={'_blank'}\r\n                rel=\"noreferrer\"\r\n              >\r\n                here\r\n              </a>\r\n            </p>\r\n            <p>or use common test account credentials:</p>\r\n            <p>Email: free@samuraijs.com</p>\r\n            <p>Password: free</p>\r\n          </FormLabel>\r\n          <FormGroup>\r\n            <TextField\r\n              label=\"Email\"\r\n              margin=\"normal\"\r\n              {...formik.getFieldProps('email')}\r\n            />\r\n            {formik.touched.email && formik.errors.email ?\r\n              <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n            <TextField\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              margin=\"normal\"\r\n              {...formik.getFieldProps('password')}\r\n            />\r\n            {formik.touched.password && formik.errors.password ?\r\n              <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n            <FormControlLabel\r\n              label={'Remember me'}\r\n              control={\r\n                <Checkbox\r\n                  {...formik.getFieldProps('rememberMe')}\r\n                  checked={formik.values.rememberMe}\r\n                />\r\n              }\r\n            />\r\n            <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n          </FormGroup>\r\n        </FormControl>\r\n      </form>\r\n    </Grid>\r\n  </Grid>\r\n}\r\n","import React from 'react'\r\nimport Backdrop from '@material-ui/core/Backdrop'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport {makeStyles, createStyles, Theme} from '@material-ui/core/styles'\r\nimport {useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    backdrop: {\r\n      zIndex: theme.zIndex.drawer + 1,\r\n      color: '#fff',\r\n    },\r\n  }),\r\n)\r\n\r\nexport function SimpleBackdrop() {\r\n  const classes = useStyles()\r\n  const initialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n\r\n  return (\r\n    <div>\r\n      <Backdrop className={classes.backdrop} open={!initialized}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n    </div>\r\n  )\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\nimport {\n  AppBar,\n  Button,\n  Container,\n  createStyles,\n  IconButton,\n  LinearProgress,\n  makeStyles,\n  Theme,\n  Toolbar,\n  Typography\n} from '@material-ui/core'\nimport {Menu} from '@material-ui/icons'\nimport {Todos} from '../features/Todos/Todos'\nimport {ErrorSnackbar} from '../components/ErrorCnackbar/ErrorSnackbar'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from './store'\nimport {initAppTC, RequestStatusType} from './app-reducer'\nimport {Login} from '../features/Login/Login'\nimport {Route, Switch} from 'react-router-dom'\nimport {logoutTC} from '../features/Login/auth-reducer'\nimport {SimpleBackdrop} from '../components/Backdrop/Backdrop'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  }),\n)\n\nconst App = () => {\n  const classes = useStyles()\n\n  const dispatch = useDispatch()\n\n  const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n\n  const logoutHandler = useCallback(() => {\n    dispatch(logoutTC())\n  }, [dispatch])\n\n  useEffect(() => {\n    dispatch(initAppTC())\n  }, [dispatch])\n\n  return (\n    <div>\n      <SimpleBackdrop />\n      <ErrorSnackbar />\n      <AppBar position=\"static\" color=\"secondary\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <Menu />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Todo\n          </Typography>\n\n          {isLoggedIn && <Button onClick={logoutHandler} color=\"inherit\">Log out</Button>}\n        </Toolbar>\n      </AppBar>\n      {status === 'loading' && <LinearProgress />}\n      <Container fixed>\n        <Switch>\n          <Route exact path=\"/\" render={() => <Todos />} />\n          <Route path=\"/login\" render={() => <Login />} />\n        </Switch>\n      </Container>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {tasksReducer} from '../features/Todos/tasks-reducer'\r\nimport {todosReducer} from '../features/Todos/todos-reducer'\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport ReduxThunk from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from '../features/Login/auth-reducer'\r\n\r\nconst rootReducer = combineReducers({\r\n  tasks: tasksReducer,\r\n  todos: todosReducer,\r\n  app: appReducer,\r\n  auth: authReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(ReduxThunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './app/App'\nimport reportWebVitals from './reportWebVitals'\nimport {store} from './app/store'\nimport {Provider} from 'react-redux'\nimport {HashRouter} from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}